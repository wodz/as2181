.module/ram/abs=h#1234 datel;
.const dadddd = 123;
divs ay1, mr1;
ar = ax0 + ay0;
ar = ax1 + ay0;
ar = ar + ay0;
ar = mr0 + ay0;
ar = mr1 + ay0;
ar = mr2 + ay0;
ar = sr0 + ay0;
ar = sr1 + ay0;
ar = ax0 + ay1;
ar = ax0 + af;
af = ax0 + ay0;
ar = ax0 + c;
ar = ax0 + ay0 + c;
ar = ax0 - ay0;
ar = mr0 - ay1;
af = sr1 - af + c - 1;
ar = ay0 - ax0;
ar = ay1 - mr0;
af = af - sr1 + c - 1;
ar = ax0 and ay0;
ar = ax1 and ay0;
ar = ax0 or ay0;
ar = ax0 xor ay0;
ar = pass af;
af = pass ax0;
ar = -ax0;
ar = -ay0;
ar = not ax0;
ar = not ay0;
ar = abs ax0;
ar = ay0 + 1;
ar = ay0 - 1;
ar = ax0 + 1;
ar = ax0 + 2;
ar = ax0 + 4;
ar = ax0 + 8;
ar = ax0 + 16;
ar = ax0 + 32;
ar = ax0 + 64;
ar = ax0 + 128;
ar = ax0 + 256;
ar = ax0 + 512;
ar = ax0 + 1024;
ar = ax0 + 2048;
ar = ax0 + 4096;
ar = ax0 + 8192;
ar = ax0 + 16384;
ar = ax0 + 32768;
ar = ax0  -2;
ar = ax0  -3;
ar = ax0  -5;
ar = ax0  -9;
ar = ax0  -17;
ar = ax0  -33;
ar = ax0  -65;
ar = ax0  -129;
ar = ax0  -257;
ar = ax0  -513;
ar = ax0  -1025;
ar = ax0  -2049;
ar = ax0  -4097;
ar = ax0  -8193;
ar = ax0  -16385;
ar = ax0  +32767;
ar = pass 0;
ar = pass 256;
ar = pass 255;
ar = pass 257;
ar = tstbit 0 of ax0;
ar = tstbit 15 of ax0;
ar = setbit 0 of ax0;
ar = clrbit 0 of ax0;
ar = tglbit 0 of ax0;
divq ax0;
divq ax1;
divs ay1,ax0;
divs af,ax0;
none = ax0 + ay0;
none = ax0 and ay0;
none = ay0 - 1;
mr = mx0 * mx0 (ss);
mr = mx0 * my0 (ss);
mr = mx1 * my0 (ss);
mr = mx0 * my1 (ss);
mr = mx0 * mx0 (uu);
mr = mx0 * mx0 (rnd);
mf = mx0 * my0 (ss);
mr = ar * ar (ss);
mr = mx1 * mx1 (ss);
mr = mr0 * mr0 (ss);
mr = mr1 * mr1 (ss);
mr = mr2 * mr2 (ss);
mr = sr0 * sr0 (ss);
mr = sr1 * sr1 (ss);
mr = mx0 * mf (ss);
mr = mr + mx0 * mx0 (ss);
mr = mr - mx0 * mx0 (ss);
mr = mr;
mr = mr (rnd);
mr = 0;
sr = ashift si (hi);
sr = ashift si (lo);
sr = ashift sr0 (hi);
sr = ashift sr1 (hi);
sr = ashift ar (hi);
sr = ashift mr0 (hi);
sr = ashift mr1 (hi);
sr = ashift mr2 (hi);
sr = sr or ashift si (hi);
sr = lshift si (hi);
sr = norm si (hi);
se = exp si (hi);
se = exp si (lo);
se = exp si (hix);
se = exp ar (hi);
sb = expadj si;
sr = ashift si by 5 (hi);
sr = sr or ashift si by 5 (hi);
sr = lshift si by 5 (hi);
sr = ashift si by -1 (hi);
nop;
rts;
rti;
idle;
idle (16);
idle (32);	
idle (64);
idle (128);
push sts;
pop sts;
pop cntr;
pop pc;
pop loop;
ena sec_reg;
ena bit_rev;
ena av_latch;
ena ar_sat;
ena m_mode;
ena timer;
ena g_mode;
ena ints;
dis sec_reg;
dis bit_rev;
dis av_latch;
dis ar_sat;
dis m_mode;
dis timer;
dis g_mode;
dis ints;
jump (i4);
jump (i5);
jump (i6);
jump (i7);
jump 0x1234;
call 0x1234;
call (i5);
nop;
modify(i0,m0);
modify(i0,m1);
modify(i0,m2);
modify(i0,m3);
modify(i1,m0);
modify(i2,m0);
modify(i3,m0);
set flag_out;
set fl0;
set fl1;
set fl2;
reset flag_out;
reset fl0;
reset fl1;
reset fl2;
toggle flag_out;
toggle fl0;
toggle fl1;
toggle fl2;
do x1234 until ce;
do x1235 until eq;
x1234: nop;
do x1236 until ne;
x1235: nop;
do x1237 until lt;
x1236: nop;
do x1238 until ge;
x1237: nop;
do x1239 until le;
x1238: nop;
do x123a until gt;
x1239: nop;
do x123b until ac;
x123a: nop;
do x123c until not ac;
x123b: nop;
do x123d until av;
x123c: nop;
do x123e until not av;
x123d: nop;
do x123f until mv;
x123e: nop;
do x1240 until not mv;
x123f: nop;
do x1241 until neg;
x1240: nop;
do x1242 until pos;
x1241: nop;
do x1243 until forever;
x1242: nop;
x1243:
ax0 = dmovlay;
sr1 = dmovlay;
dmovlay = ax0;
dmovlay = sr1;
ax0 = io ( 0x03ff );
io ( 0x03ff ) = ax0;
pop sts, pop loop, pop cntr, pop pc;
ena sec_reg, ena bit_rev, dis g_mode;
if ne ar = ax0 + ay0;
if not ce mr = mr + mx0 * mx0 (ss);
if mv sat mr;
if ne jump 0x1234;
if flag_in jump 0x1234;
if not flag_in jump 0x1234;
if flag_in call 0x1234;
if not flag_in call 0x1234;
set flag_out, reset fl0, toggle fl1;
ax0 = ax0;
ax1 = ax0;
rx1 = ax0;
ax0 = ax1;
ax0 = rx1;
ax1 = h#ffff;
sb = 0x3fff;
owrcntr = 0x1234;
ax0 = dm(i0,m0);
ax0 = dm(i0,m3);
ax0 = dm(i3,m0);
ax0 = dm(i4,m4);
ax0 = dm(i4,m7);
ax0 = dm(i7,m4);
ax1 = dm(i0,m0);
ax0 = pm(i4,m4);
ax0 = pm(i4,m7);
ax0 = pm(i7,m4);
ax1 = pm(i7,m4);
dm(i0,m0) = ax0;
dm(i0,m3) = ax0;
dm(i3,m0) = ax0;
dm(i4,m4) = ax0;
dm(i4,m7) = ax0;
dm(i7,m4) = ax0;
dm(i0,m0) = ax1;
pm(i4,m4) = ax0;
pm(i4,m7) = ax0;
pm(i7,m4) = ax0;
pm(i7,m4) = ax1;
ar=ax1+ay1, mx1=my1;
mr=mr+mx0*my1 (ss), mx1=my1;
af=ay0-1, mx1=my0;
sr=ashift si (hi), mx0=mx0;
sr=lshift si (hi), mx0=mx0;
ar=ax1+ay1, mx1=dm(i0,m0);
ar=ax1+ay1, mx1=dm(i3,m0);
ar=ax1+ay1, mx1=dm(i0,m3);
ar=ax1+ay1, mx1=dm(i4,m4);
ar=ax1+ay1, mx1=pm(i4,m4);
mr = mr+mx0*my1(ss), mx1=dm(i0,m0);
mr = mr+mx0*my1(ss), mx1=dm(i4,m4);
mr = mr+mx0*my1(ss), mx1=pm(i4,m4);
sr = ashift si(hi), mx1=dm(i0,m0);
sr = ashift si(hi), mx1=dm(i4,m4);
sr = ashift si(hi), mx1=pm(i4,m4);
dm(i0,m0)=mx1, ar=ax1+ay1;
dm(i3,m0)=mx1, ar=ax1+ay1;
dm(i0,m3)=mx1, ar=ax1+ay1;
dm(i4,m4)=mx1, ar=ax1+ay1;
pm(i4,m4)=mx1, ar=ax1+ay1;
dm(i0,m0)=mx1, mr = mr+mx0*my1(ss);
dm(i4,m4)=mx1, mr = mr+mx0*my1(ss);
pm(i4,m4)=mx1, mr = mr+mx0*my1(ss);
dm(i0,m0)=mx1, sr = ashift si(hi);
dm(i4,m4)=mx1, sr = ashift si(hi);
pm(i4,m4)=mx1, sr = ashift si(hi);
ax0=dm(i0,m0), ay0=pm(i4,m4);
ax1=dm(i0,m0), ay0=pm(i4,m4);
mx0=dm(i0,m0), ay0=pm(i4,m4);
mx1=dm(i0,m0), ay0=pm(i4,m4);
ax0=dm(i3,m0), ay0=pm(i4,m4);
ax0=dm(i0,m3), ay0=pm(i4,m4);
ax0=dm(i0,m0), ay1=pm(i4,m4);
ax0=dm(i0,m0), my0=pm(i4,m4);
ax0=dm(i0,m0), my1=pm(i4,m4);
ax0=dm(i0,m0), ay0=pm(i7,m4);
ax0=dm(i0,m0), ay0=pm(i4,m7);
mx1=dm(i3,m3), my1=pm(i7,m7);
ar=ax1+ay1, mx1=dm(i3,m3), my1=pm(i7,m7);
ar=ay0-ax0, mx1=dm(i3,m3), my1=pm(i7,m7);
mr=mr+mx0*my0(ss), mx1=dm(i3,m3), my1=pm(i7,m7);
ax0 = dm(0x1234);
sr1 = dm(0x1234);
owrcntr = dm(0x1234);
dm(0x1234) = ax0;
dm(0x1234) = sr1;
dm(0x1234) = owrcntr;
dm(i0,m0) = 0x1234;
dm(i3,m0) = 0x1234;
dm(i0,m3) = 0x1234;
dm(i4,m4) = 0x1234;

.var/dm/abs=0 xxx[16];
.var/dm/abs=18 yyy[16];
.var/dm ddd, eee;
.var/pm datl[16];
.init xxx : 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 + 1;
.init xxx[10] : 111;
.endmod;


.module/ram amod;
	jump bla;
.endmod;

.module/ram bmod;
.entry bla;
bla:
	jump bla;
.endmod;
